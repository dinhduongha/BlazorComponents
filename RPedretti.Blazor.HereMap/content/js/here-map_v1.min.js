/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./ts/InitMap.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/load-external-scripts/lib/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/load-external-scripts/lib/index.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// This array is to keep track of the loaded libraries
var loadedLibraries = [];
/**
 * Record the libs (id) only if the array doesn't contain the same already
 *
 * @param  {String} id of the script DOM element
 */

function registerLibraryLoaded(id) {
  if (loadedLibraries.indexOf(id) < 0) {
    loadedLibraries.push(id);
  }
}
/**
 * Check if the script.id exist already on the page
 * to add a listener because the library you asked to load
 * might be on the loading process
 * and after is loaded register the lib to avid this process twice
 *
 * @param  {HTMLElement}
 * @param  {Function}
 * @return {[type]}
 */


function appendUnique(script, next) {
  var appendedScript = document.getElementById(script.id);

  if (appendedScript) {
    appendedScript.addEventListener('load', function onLoadScript() {
      appendedScript.removeEventListener('load', onLoadScript);
      registerLibraryLoaded(script.id);
      next();
    });
    return;
  } // this will only add a new script tag if the lib is not already on the DOM
  // the above part of this function will handle the scenario where
  // even tho is already on the DOM might be still loading


  document.body.appendChild(script);
}
/**
 * @param  {Object} with 'id' and 'src' as the html id and source
 * @return {Promise} is resolved in multiple scenarios
 *
 * @scenario 1: load one external script
 * @scenario 2: attempt to load one external script multiple times
 * without the first attempt completed so the second call will
 * get a listener and when is loaded first and second will be completed.
 * @scenario 3: attempt load the same external script after is completed.
 */


function loadScript(_ref) {
  var src = _ref.src,
      id = _ref.id,
      data = _ref.data;
  var script = document.createElement('script');
  script.id = id;
  script.src = src;
  script.setAttribute("data-".concat(data ? data : 'vendor'), id);
  return new Promise(function (resolve, reject) {
    // once the lib is registered you can resolve immediatelly
    // because it means that is fully loaded
    if (loadedLibraries.indexOf(id) > -1) {
      resolve("".concat(id, " was loaded before"));
    }

    script.addEventListener('load', function onLoadScript() {
      script.removeEventListener('load', onLoadScript);
      registerLibraryLoaded(id);
      resolve(id);
    });

    script.onerror = function onErrorLoadingScript() {
      // Remove the element from the body in case of error
      // to give the possibility to try again later
      // calling the same function
      document.body.removeChild(script);
      reject();
    };

    appendUnique(script, resolve);
  });
}

var _default = loadScript;
exports.default = _default;


/***/ }),

/***/ "./ts/Helpers.ts":
/*!***********************!*\
  !*** ./ts/Helpers.ts ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class Helper {
    static removeEmpty(obj) {
        Object.keys(obj).forEach(k => obj[k] && typeof obj[k] === 'object' && this.removeEmpty(obj[k]) ||
            !obj[k] && (obj[k] === undefined || obj[k] === null) && delete obj[k]);
        return obj;
    }
}
exports.Helper = Helper;


/***/ }),

/***/ "./ts/HereMap.ts":
/*!***********************!*\
  !*** ./ts/HereMap.ts ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const loadScript = __webpack_require__(/*! load-external-scripts */ "./node_modules/load-external-scripts/lib/index.js");
const DotNetMapOptions_1 = __webpack_require__(/*! ./types/DotNetMapOptions */ "./ts/types/DotNetMapOptions.ts");
class HereMap {
    constructor() {
        this.initService = (appId, appCode, useCIT = true) => __awaiter(this, void 0, void 0, function* () {
            if (HereMap.platform === undefined) {
                yield loadScript({ src: `${HereMap.baseScriptUrl}${HereMap.coreModuleScript}.js`, id: HereMap.coreModuleScript });
                yield loadScript({ src: `${HereMap.baseScriptUrl}${HereMap.serviceModuleScript}.js`, id: HereMap.serviceModuleScript });
                HereMap.platform = new H.service.Platform({
                    app_code: appCode,
                    app_id: appId,
                    useCIT: useCIT,
                    useHTTPS: true
                });
            }
            return 1;
        });
        this.loadModules = (modules) => __awaiter(this, void 0, void 0, function* () {
            yield Promise.all(modules.map(m => loadScript({ src: `${HereMap.baseScriptUrl}${m}.js`, id: m })));
            if (modules.indexOf("ui") >= 0) {
                const link = document.createElement('link');
                link.rel = 'stylesheet';
                link.type = 'text/css';
                link.href = 'https://js.api.here.com/v3/3.0/mapsjs-ui.css?dp-version=1533195059';
                document.head.appendChild(link);
            }
            return 1;
        });
        this.initMap = (map, options) => {
            var pixelRatio = window.devicePixelRatio || 1;
            var defaultLayers = HereMap.platform.createDefaultLayers({
                tileSize: pixelRatio === 1 ? 256 : 512,
                ppi: pixelRatio === 1 ? undefined : 320
            });
            var mapInstance = new H.Map(map, defaultLayers.normal.map, DotNetMapOptions_1.DotNetMapOptions.toHereMapOptions(options));
            HereMap._maps.set(map.id, { instance: mapInstance, element: map });
            HereMap._mapDefaultLayer.set(mapInstance, defaultLayers);
            return 1;
        };
        this.addDefaultBehaviour = (mapId) => {
            if (!HereMap._maps.has(mapId)) {
                throw new Error(`${mapId} does not exists`);
            }
            new H.mapevents.Behavior(new H.mapevents.MapEvents(HereMap._maps.get(mapId).instance));
            return 1;
        };
        this.addDefaultUi = (mapId) => {
            if (!HereMap._maps.has(mapId)) {
                throw new Error(`${mapId} does not exists`);
            }
            var map = HereMap._maps.get(mapId);
            var layer = HereMap._mapDefaultLayer.get(map.instance);
            H.ui.UI.createDefault(map.instance, layer);
            return 1;
        };
    }
}
HereMap.baseScriptUrl = 'https://js.api.here.com/v3/3.0/mapsjs-';
HereMap.coreModuleScript = 'core';
HereMap.serviceModuleScript = 'service';
HereMap._maps = new Map();
HereMap._mapDefaultLayer = new Map();
exports.HereMap = HereMap;


/***/ }),

/***/ "./ts/InitMap.ts":
/*!***********************!*\
  !*** ./ts/InitMap.ts ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const HereMap_1 = __webpack_require__(/*! ./HereMap */ "./ts/HereMap.ts");
var rpedrettiBlazorComponents;
(function (rpedrettiBlazorComponents) {
    var hereMaps;
    (function (hereMaps) {
        hereMaps.map = new HereMap_1.HereMap();
    })(hereMaps = rpedrettiBlazorComponents.hereMaps || (rpedrettiBlazorComponents.hereMaps = {}));
})(rpedrettiBlazorComponents || (rpedrettiBlazorComponents = {}));
window.rpedrettiBlazorComponents = rpedrettiBlazorComponents;


/***/ }),

/***/ "./ts/types/DotNetMapOptions.ts":
/*!**************************************!*\
  !*** ./ts/types/DotNetMapOptions.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const Helpers_1 = __webpack_require__(/*! ../Helpers */ "./ts/Helpers.ts");
class DotNetMapOptions {
    static toHereMapOptions(instance) {
        const clone = Object.assign({}, instance);
        Helpers_1.Helper.removeEmpty(clone);
        return {
            autoColor: clone.autoColor,
            zoom: clone.zoom,
            bounds: clone.bounds ?
                new H.geo.Rect(clone.bounds.top, clone.bounds.left, clone.bounds.bottom, clone.bounds.right) :
                clone.bounds,
            center: clone.center ?
                { alt: clone.center.altitude, lat: clone.center.latitude, lng: clone.center.longitude, ctx: clone.center.altitueContext } :
                undefined,
            engineType: clone.engineType,
            fixedCenter: clone.fixedCenter,
            imprint: clone.imprint,
            renderBaseBackground: clone.renderBaseBackground,
            margin: clone.margin,
            padding: clone.padding
        };
    }
}
exports.DotNetMapOptions = DotNetMapOptions;


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,