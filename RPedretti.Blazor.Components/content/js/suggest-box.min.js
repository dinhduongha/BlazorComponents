!function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(1);t.Suggestbox=class{constructor(){this.registeredSuggestboxes=new Map,this.unregisterSuggestBox=(e=>{this.registeredSuggestboxes.delete(e)}),this.initSuggestBox=((e,t)=>(this.registeredSuggestboxes.set(t,e),$(`#${t}`).keydown(e=>{!$(e.target.parentNode.parentNode).hasClass("-open")||"ArrowDown"!==e.key&&"ArrowUp"!==e.key||e.preventDefault(),"ArrowDown"!==e.key&&"ArrowUp"!==e.key&&"Enter"!==e.key&&"Escape"!==e.key&&"Tab"!==e.key&&e.stopPropagation()}),1)),this.clearSelection=(e=>{for(var[t,r]of this.registeredSuggestboxes){const o=$(`#${t}`);if(n.Helpers.senseClickOutside($(e.target),o))return void r.invokeMethodAsync("ClearSelection")}})}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class n{static focusById(e){return $(`#${e}`).focus(),1}static senseClickOutside(e,t){return 0===e.closest(t).length}static removeEmpty(e){return Object.keys(e).forEach(t=>e[t]&&"object"==typeof e[t]&&n.removeEmpty(e[t])||!e[t]&&(void 0===e[t]||null===e[t])&&delete e[t]),e}static genericFunction(e){return[window].concat(e.split(".")).reduce(function(e,t){return e[t]})}}t.Helpers=n}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,